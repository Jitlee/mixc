
<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8" />
		<title>手势开发</title>
		<link rel="stylesheet" href="css/swiper-3.4.2.min.css" />
		<style>
			* { margin: 0; padding: 0; box-sizing: border-box; }
			body, html { width: 100%; height: 100%; overflow: hidden; }
			.swiper-container { width: 100%; height: 100%; }
			.swiper-slide { color: white; text-align: center; padding-top: 25%; font-size: 60px; transition: all 0.5s ease-in-out; }
			.blue-slide { background-color: #4390EE; }
			.red-slide { background-color: #CA4040; }
			.yellow-slide { background-color: #FF8604; }
			
			.swiper-slide.active { box-shadow: 0px 0px 20px red; border:2px solid #ff33ff; }
			
			.swiper-container {
		        width: 100%;
		        padding-top: 50px;
		        padding-bottom: 50px;
		    }
		    .swiper-slide {
		        background-position: center;
		        background-size: cover;
		        width: 500px;
		        height: 500px;
		    }
			
			 #output{
		        font-size: 66px;
		        color: #005d98;
		        text-align: left;
		        position: fixed;
		        bottom: 18px;
		        z-index: 999;
		      }
		
		      #progress {
		        background: #005d98;
		        position: fixed;
		        bottom: 0;
		        left: 0;
		        height: 16px;
		        width: 0%;
		        z-index: 999;
		      }
		      img#connect-leap{
		        /* this can be removed with leapjs-plugins 0.1.4.1 */
		        max-width: 100%;
		      }
		      
		    #previewMask {
		    	position: absolute;
		    	left: 0;
		    	right: 0;
		    	top: 0;
		    	bottom: 0;
		    	transition: background-color 0.5s ease-in-out;
		    	display: none;
		    	z-index: 999;
		    }
		    
		    #previewMask.active {
		    	display: block;
		    	background-color: rgba(0,0,0,0.5);
		    }
		    
		    #previewBody {
		    	position: absolute;
		    	left: 30px;
		    	right: 30px;
		    	top: 30px;
		    	bottom: 30px;
		    	background-repeat: no-repeat;
		    	background-size: contain;
		    	background-position: 50% 50%;
		    }
		    
		    .btn {
		    	position: absolute;
		    	display: block;
		    	top: 0px; 
		    	left: 0px;
		    	width: 100px;
		    	height: 30px;
		    	line-height: 30px;
		    	color: #4390EE;
		    	text-shadow: #000 0 0 2px 2px;
		    	text-align: center;
		    	cursor: pointer;
		    	z-index: 99999;
		    }
		    
		    #charts {
		    	position: absolute;
		    	left: 20px;
		    	top: 600px;
		    	right: 20px;
		    	bottom: 20px;
		    	pointer-events: none;
		    	z-index: 9996;
		    }
		    
		</style>
	</head>
	<body>
		<div class="swiper-container">
		    <div class="swiper-wrapper">
		    	<div class="swiper-slide" style="background-image:url(img/Chrysanthemum.jpg)"></div>
	            <div class="swiper-slide" style="background-image:url(img/Desert.jpg)"></div>
	            <div class="swiper-slide" style="background-image:url(img/Hydrangeas.jpg)"></div>
	            <div class="swiper-slide" style="background-image:url(img/Jellyfish.jpg)"></div>
	            <div class="swiper-slide" style="background-image:url(img/Koala.jpg)"></div>
	            <div class="swiper-slide" style="background-image:url(img/Lighthouse.jpg)"></div>
	            <div class="swiper-slide" style="background-image:url(img/Penguins.jpg)"></div>
	            <div class="swiper-slide" style="background-image:url(img/Tulips.jpg)"></div>
		    </div>
		    <!-- 如果需要分页器 -->
		    <div class="swiper-pagination"></div>
		    
		    <!-- 如果需要滚动条 -->
		    <div class="swiper-scrollbar"></div>
		</div>
		<div id="previewMask">
			<div id="previewBody"></div>
		</div>
		<div id="charts"></div>
		<a class="btn" onclick="toggleRiggedHand(this)">显示手势</a>
		<script type="text/javascript" src="js/swiper-3.4.2.min.js" ></script>
    
		<script>        
		  	var mySwiper = new Swiper ('.swiper-container', {
			    pagination: '.swiper-pagination',
		        effect: 'coverflow',
		        grabCursor: true,
		        centeredSlides: true,
		        slidesPerView: 'auto',
		        coverflow: {
		            rotate: 50,
		            stretch: 0,
		            depth: 100,
		            modifier: 1,
		            slideShadows : true
		        }
			})        
		</script>
		
		<div id=output></div>
    	<div id=progress></div>
    	<script src="js/underscore-min.js" ></script>
		<script src="js/three.js"></script>
    	<script src="js/leap-0.6.4.min.js"></script>
    	<script src="js/leap-plugins-0.1.6.1.js"></script>
		<script src="js/leap.rigged-hand-0.1.4.min.js"></script>
		<script type="text/javascript" src="js/echarts.min.js" ></script>
		
		<script type="text/javascript">
		    /********************************************************
		     * This is the actual example part where we call grabStrength
		     *****************************************************/
		    var output = document.getElementById('output');
		    var progress = document.getElementById('progress');
		    var previewMask = document.getElementById("previewMask");
		    var previewBody = document.getElementById("previewBody");
		    var isPreviewing = false; // save if
		    
		    var lastScreenX = 0;		    
		    var lastScreenY = 0;	
		    var deviate = 50;
		    var previewTimeoutId = 0;
		    var isBuzy = false;
		    var Y_OFFSET = 400;
		    var preview = function(position) {
		      	if(isPreviewing || previewMask.classList.contains("active")) {
		      		previewMask.classList.remove("active");
		      	} else {
		      		var sliders = document.querySelectorAll(".swiper-slide");
		      		var slider = null;
					var rect = null;
					var left = position[0];
					var top = position[1] + Y_OFFSET;
//					if(Math.abs(lastScreenX - left) < deviate && Math.abs(lastScreenY - top) < deviate) {
						for(var i = 0, iCount = sliders.length; i < iCount; i++) {
							slider = sliders[i];
							rect = slider.getBoundingClientRect();
							if(rect.left <= left && rect.right >= left && rect.top <= top && rect.bottom >= top) {
								previewBody.style.backgroundImage = slider.style.backgroundImage;
			      				previewMask.classList.add("active");
			      				isPreviewing = true;
								return;
							}
						}
//					}
		      	}
		      	isPreviewing = false;
		    }
		
		    // Set up the controller:
		    var pinchCount = 0;
		    var controller = Leap.loop({ background: true }, {
		        hand: function(hand) {
		    		var screenPosition = hand.screenPosition();
//		        	output.innerHTML = hand.grabStrength.toPrecision(2);
//		            progress.style.width = hand.grabStrength * 100 + '%';
		        	output.innerHTML = hand.pinchStrength.toPrecision(2);
		            progress.style.width = hand.pinchStrength * 100 + '%';
		            if(hand.pinchStrength == 1 && hand.valid) {
		            	pinchCount++;
		            	if(pinchCount == 20) {
//		            	if(hand.direction[1] < 0.8) { // 手心向下来抓才算有效
							if(pinchCount)
			            	if(previewTimeoutId == 0) {
				            	lastScreenX = screenPosition[0];
				            	lastScreenY = screenPosition[1];
				            	previewTimeoutId = window.setTimeout(function() {
				            		preview(screenPosition);
				            		previewTimeoutId = 0;
				            	}, 50);
			            	}
//		            	}
						}
		            } else {
		            	window.clearTimeout(previewTimeoutId);
		            	previewTimeoutId = 0;
				        pinchCount = 0;
		            }
		        }
		    }).use('screenPosition', { scale: 0.6 });
		    
		    /********************************************************
		     * This is the actual example part where we call gestures
		     *****************************************************/   
		    var swiperTimeoutId = 0;
		    var isSwiperBuzing = false;
		    controller.on("ready", function() {
		    	var swiper = controller.gesture('swipe');
			    var tolerance = 400;
			    var cooloff = 300;
			
			    var x = 2, y = 2;
			
			    var slider = function(xDir, yDir) {
//			      	console.log("xDir: " + xDir);
				  	if(xDir < 0) {
				  		mySwiper.slideNext();
				  	} else if(xDir > 0) {
				  		mySwiper.slidePrev();
				  	}
				  	
				  	if(xDir != 0 && (isPreviewing || previewMask.classList.contains("active"))) {
				  		preview();
				  	}
				  	
				  	isSwiperBuzing = true;
				  	window.setTimeout(function() {
				  		isSwiperBuzing = false;
				  	}, 50);
			    }
			    
			    var leftHandCount = 0;
			    var rightHandCount = 0;
			    swiper.update(function(g) {
			    	if(isSwiperBuzing || g.lastFrame.hands.length != 1) {
			    		return;
			    	}
			    	
			    	window.clearTimeout(swiperTimeoutId);
			    	var translation = g.translation();
			    	var transX = translation[0];
			    	var transY = translation[1];
			    	var absTransX = Math.abs(transX);
			    	var absTransY = Math.abs(transY);
			    	let speeds = g.gestures.map(g => {return g.speed;})
			    	let maxSpeed = Math.max.apply(null, speeds);
			    	let minSpeed = Math.min.apply(null, speeds);
			    	let firstSpeed = speeds[0];
			    	let lastSpeed = speeds[speeds.length - 1];
			    	let handType = g.lastFrame.hands[0].type;
			    	if(handType == 'left') {
			    		leftHandCount++;
			    	} else {
			    		rightHandCount++;
			    	}
//			    	console.log(handType);
			    	swiperTimeoutId = window.setTimeout(function() {
			    		updateChart(speeds);
			    		console.log("transX: " + transX + ", transY: " + transY);
				    	if(maxSpeed - minSpeed > 100) {
				    		if(transX > tolerance && leftHandCount > rightHandCount) {
					    		slider(-1);
					    	} else if(transX < -tolerance && leftHandCount < rightHandCount) {
					    		slider(1);
					    	}
				    	}
				    	
				    	leftHandCount = 0;
				    	rightHandCount = 0;
			    	}, 100);
//			    	console.log("transX: " + transX + ", transY: " + transY);
			    	
			    	
//			    	output.innerHTML = g.lastGesture.speed;
//		            progress.style.width = Math.round(g.lastGesture.speed/ 600 * 100) + '%';

//					if(absTransY > absTransX &&  absTransY > tolerance) {
////						console.log("transX: " + transX + ", transY: " + transY);
//				        var xDir = absTransX > tolerance ? (transX > 0 ? -1 : 1) : 0;
//				        var yDir = absTransY > tolerance ? (transY < 0 ? -1 : 1) : 0;
////				        window.clearTimeout(swiperTimeoutId);
//						slider(yDir);
//					}
			    	
//			    	if(armDirection[1] > -0.2 && armDirection[1] < 0.3) { // 手背抬高竖起来不算
//			    		if(handDirection[1] > -0.2 && handDirection[1] < 0.6) { //  手心才算
//			    			if(handDirection[0] > -0.11 && handDirection[0] < 0.11) { //  手掌测起来才算
//						    	if(g.lastGesture.speed > 380) { // 过滤速度
			//				    	console.log("挥动的速度" + g.lastGesture.speed);
//							      	if ((absTransX > tolerance ||  absTransY > tolerance)) {
//								        var xDir = absTransX > tolerance ? (transX > 0 ? -1 : 1) : 0;
//								        var yDir = absTransY > tolerance ? (transY < 0 ? -1 : 1) : 0;
//								        window.clearTimeout(swiperTimeoutId);
//				//				        swiperTimeoutId = window.setTimeout(function() {
//								        	slider(xDir, yDir);
//				//				        }, 200);
//							      	}
//						      	}
//						    }
//					    }
//			    	}
			    });
				
				controller.connection.enableGestures(true);
		    });
		    
		    // 上下翻手
		    controller.on("frame", function(frame) {
		    	
		    });
		    
		    /********************************************************
		     * This is the actual example part where we call poisition
		     *****************************************************/ 
		    var pointers = [];
		    controller.on("frame", function(frame) {
//		    	if(frame.hands.length == 0) {
//		    		window.clearTimeout(previewTimeoutId);
//		            previewTimeoutId = 0;
//		            return;
//		    	}
		    	frame.hands.forEach(function(hand, index) {
		    		if(index > 0) {
		    			return;
		    		}
		    		var screenPosition = hand.screenPosition();
		    		
		    		// set cat transform
			    	var pointer = ( pointers[index] || (pointers[index] = new Cat()) );    
			    	pointer.setTransform(screenPosition, hand.roll());
			    	
			    	// set highlight
			    	higlightElement(screenPosition);
			  	});
			  	
//			  	if(frame.valid && frame.gestures.length > 0){
//					frame.gestures.forEach(function(gesture){
//				        switch (gesture.type){
//				          	case "circle":
////				            	console.log("Circle Gesture");
//				              	break;
//				          	case "keyTap":
//				            	console.log("Key Tap Gesture");
//				              	break;
//				          	case "screenTap":
//				            	frame.hands.forEach(function(hand, index) {
//					    			if(index > 0) {
//					    				return;
//					    			}
//					    			var screenPosition = hand.screenPosition();
//					    			preview(screenPosition);
//						  		});
//				            break;
//				          case "swipe":
////				              	console.log("Swipe Gesture");
//				              	break;
//				        }
//			    	});
//			   }
		    }).on("handLost", function() {
		    	window.clearTimeout(previewTimeoutId);
		        previewTimeoutId = 0;
//		        window.clearTimeout(swiperTimeoutId);
//		        swiperTimeoutId = 0;
		    });
		    
		    var Cat = function() {
				var cat = this;
				var img = document.createElement('img');
				img.src = 'img/hand.png';
				img.style.position = 'absolute';
				img.style.zIndex = 9999;
				img.onload = function () {
				cat.setTransform([window.innerWidth/2,window.innerHeight/2], 0);
					document.body.appendChild(img);
				}
				  
				cat.setTransform = function(position, rotation) {
				    img.style.left = position[0] - 0.5 * img.width + 'px';
				    img.style.top  = position[1] + Y_OFFSET + 0.5 * img.height + 'px';
				
//				    img.style.transform = 'rotate(' + -rotation + 'rad)';
//				    
//				    img.style.webkitTransform = img.style.MozTransform = img.style.msTransform =
//				    img.style.OTransform = img.style.transform;
				
				};
			};
			
			function higlightElement(position) {
				var sliders = document.querySelectorAll(".swiper-slide");
				var slider = null;
				var rect = null;
				var left = position[0];
				var top = position[1] + Y_OFFSET;
				var lastSlider = null;
				for(var i = 0, iCount = sliders.length; i < iCount; i++) {
					slider = sliders[i];
					rect = slider.getBoundingClientRect();
					if(rect.left <= left && rect.right >= left && rect.top <= top && rect.bottom >= top) {
						if(!slider.classList.contains("active")) {
							lastSlider = document.querySelector(".swiper-slide.active");
							lastSlider && lastSlider.classList.remove("active");
							slider.classList.add("active");
						}
						return;
					}
				}
				
				lastSlider = document.querySelector(".swiper-slide.active");
				lastSlider && lastSlider.classList.remove("active");
			}
		     
	    
	        /*********************************************************
		     * The rest of the code is here for visualizing the example. Feel
		     * free to remove it to experiment with the API value only
		     ****************************************************/
		
		    // Adds the rigged hand and playback plugins
		    // to a given controller, providing a cool demo.
		    visualizeHand = function(controller){
		        // The leap-plugin file included above gives us a number of plugins out of the box
		        // To use a plugins, we call `.use` on the controller with options for the plugin.
		        // See js.leapmotion.com/plugins for more info
		
		        controller.on('riggedHand.meshAdded', function(handMesh, leapHand){
		            handMesh.material.opacity = 1;
		        });
		        
		        controller.use('riggedHand', {
		            scale: 1.0,
		            boneColors: function (boneMesh, leapHand){
		                if ((boneMesh.name.indexOf('Finger_') == 0) ) {
		                    return {
		                        hue: 0.564,
					            saturation: leapHand.pinchStrength,
					            lightness: 0.5
		                    }
		                }
		            }
		        });
		        
				// set to top
				controller.plugins.riggedHand.renderer.domElement.style.zIndex = 9998;
				controller.plugins.riggedHand.renderer.domElement.style.pointerEvents = 'none';
				controller.plugins.riggedHand.renderer.domElement.style.display = 'none';
				
		 		var camera = controller.plugins.riggedHand.camera;
			    camera.position.set(0,30,30);
			    camera.lookAt(new THREE.Vector3(0,0,0));

//			        var camera = controller.plugins.riggedHand.camera;
//			        camera.position.set(0,20,-25);
//			        camera.lookAt(new THREE.Vector3(0,3,0));
		    };
		    visualizeHand(Leap.loopController);
		    
		    function toggleRiggedHand(el) {
		    	var style = controller.plugins.riggedHand.renderer.domElement.style;
		    	el.innerHTML = style.display == 'none' ? '隐藏手势' : '显示手势';
		    	style.display = style.display == 'none' ? '' : 'none';
		    }
		    
		    
		    (function() {
		    	var option = {
				    title: {
				        text: '堆叠区域图'
				    },
				    tooltip : {
				        trigger: 'axis',
				        axisPointer: {
				            type: 'cross',
				            label: {
				                backgroundColor: '#6a7985'
				            }
				        }
				    },
				    legend: {
				        data:['速度', 'X', 'Y']
				    },
				    grid: {
				        left: '3%',
				        right: '4%',
				        bottom: '3%',
				        containLabel: true
				    },
				    xAxis : [
				        { type : 'category', boundaryGap : false, data : [] },
				        { type : 'category', boundaryGap : false, data : [] },
				    ],
				    yAxis : [ { type : 'value' } ],
				    series : [
				        {
				            name:'速度',
				            type:'line',
				            stack: '总量',
				            areaStyle: {normal: {}},
				            data:[]
				        },
				        {
				            name:'X',
				            type:'line',
				            stack: '总量',
				            areaStyle: {normal: {}},
				            data:[]
				        },
				        {
				            name:'Y',
				            type:'line',
				            stack: '总量',
				            areaStyle: {normal: {}},
				            data:[]
				        }
				    ]
				};
				
				var myChart = echarts.init(document.getElementById('charts'));
				myChart.setOption(option);
				
				window.updateChart = function(speeds){
					option.xAxis[0].data = Array.apply(null, { length: speeds.length }).map((o, i) => { return i })
					option.series[0].data = speeds;
					myChart.setOption(option);
				}
				
				window.refreshChart = function(x, y){
					option.xAxis[1].data.push(option.xAxis[0].data.length)
					option.series[1].data.push(x)
					option.series[2].data.push(y)
					myChart.setOption(option);
				}
		    })();
	  </script>
	</body>
</html>
